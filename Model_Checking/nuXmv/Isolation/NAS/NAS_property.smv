--################################################################################--
--##################################### NAS ####################################
--################################################################################--
-- NAS Counter Reset attack (Section 6.1.1): 
-- Property: The replay protection assures that the same NAS message is not accepted twice by the receiver.
-- The UE responds with security_mode_complete message if the amf sent security_mode_command message.
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:=	TRUE;
-- Resultant attack: Adversary sent a replayed security_mode_command, and received security_mode_complete from the UE (traceability). Reception of complete message 
-- signifies the successful processing of security_mode_command messsage and reset the ue_nas_dl_count to 0.
-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& inj_adv_act_AU != adv_AU_auth_reject
		& inj_adv_act_AU != adv_AU_reg_reject
		& inj_adv_act_AU != adv_AU_nwk_dereg_req
		& inj_adv_act_AU != adv_AU_service_reject
		& inj_adv_act_AU != adv_AU_service_accept
		& inj_adv_act_AU != adv_AU_config_update_cmd
		& inj_adv_act_AU != adv_AU_auth_req
		& inj_adv_act_AU != adv_AU_id_req
		& inj_adv_act_AU != adv_AU_nwk_dereg_accept
		& inj_adv_act_AU != adv_AU_reg_accept
		& inj_adv_act_AU != adv_AU_ue_ctx_release
	)
	->
		-- G((ue_nas_state = ue_registered
		-- & ueregcompleted
        -- & ue_nas_action = sm_complete) -> O (chan_AU = chanAU_sm_command &  amf_nas_action = sm_command)) ;
		G (((ue_nas_state = ue_registered & ueregcompleted) & ue_nas_action = sm_complete) 
			-> O (chan_AU = chanAU_sm_command & amf_nas_action = sm_command));


-- Property 7: The UE must not reset the counter while using the same security context.
-- **Property (TS 33.501, clasue 6.4.3.2):** *Replay protection shall be activated when integrity protection is 
-- activated, except when the NULL integrity protection algorithm is selected. Replay protection shall ensure that 
--- the receiver only  accepts each incoming NAS COUNT value once using the same NAS security context.*
-- Set inj_adv_UA_enabled:=	FALSE; inj_adv_AU_enabled:=	TRUE;
-- Attack: Adversary sent a replayed security_mode_command message with DL_COUNT=0 and resets 
-- the UL_COUNT and DL_COUNT of the user.
-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& !amfderegrequested
		& inj_adv_act_AU != adv_AU_auth_reject
		& inj_adv_act_AU != adv_AU_reg_reject
		& inj_adv_act_AU != adv_AU_nwk_dereg_req
		& inj_adv_act_AU != adv_AU_service_reject
		& inj_adv_act_AU != adv_AU_service_accept
		& inj_adv_act_AU != adv_AU_config_update_cmd
		& inj_adv_act_AU != adv_AU_auth_req
		& inj_adv_act_AU != adv_AU_id_req
		& inj_adv_act_AU != adv_AU_nwk_dereg_accept
		& inj_adv_act_AU != adv_AU_reg_accept
		& inj_adv_act_AU != adv_AU_ue_ctx_release
	)
	->
		G (((ue_nas_state = ue_registered) & ueregcompleted) 
			-> F ((ue_nas_state = ue_registered) & (ue_nas_dl_count > 0))) ;


--------------------------------------------------------------------------------------------------------------

-- Uplink NAS Counter Desynchronization attack (Section 6.1.2): 
-- Property: The AMF correctly verifies a legitimate security_mode_complete message sent by the UE in response to a security_mode_command message sent by the AMF.
-- The UE responds with security_mode_complete message if the amf sent security_mode_command message.
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:=	TRUE;
-- Resultant attack: Adversary crafted invalid security_mode_command messages for which the UE sends security_mode_reject message and increments UE's uplink counter.

-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& inj_adv_act_AU != adv_AU_auth_reject
		& inj_adv_act_AU != adv_AU_reg_reject
		& inj_adv_act_AU != adv_AU_nwk_dereg_req
		& inj_adv_act_AU != adv_AU_service_reject
		& inj_adv_act_AU != adv_AU_service_accept
		& inj_adv_act_AU != adv_AU_config_update_cmd
		& inj_adv_act_AU != adv_AU_auth_req
		& inj_adv_act_AU != adv_AU_id_req
		& inj_adv_act_AU != adv_AU_nwk_dereg_accept
		& inj_adv_act_AU != adv_AU_reg_accept
		& inj_adv_act_AU != adv_AU_ue_ctx_release
	)
	->
		G (((ue_nas_state = ue_registered & ueregcompleted) & ue_nas_action = sm_complete) 
			-> O (chan_AU = chanAU_sm_command & amf_nas_action = sm_command));
-------------------------------------------------------------------------------------------------------

Exposing NAS sequence Number attack (Section 6.1.3): 

Exposing NAS sequence Number attack (Section 6.1.3): 
(* ProVerif *)

(* public communication channel *)
free c.

query attacker (amf_dl_seq)

(* constant values *)
fun macFail/0.
fun security_mode_command/0.
fun security_mode_complete/0.
fun security_mode_reject/0.
fun registration_accept/0.
fun registration_reject/0.


(* 5G AKA protocol specific mac and key generation functions *)
fun f/2.

(* symmetric key encryption function *)
fun senc/3.
fun sdec/2.

equation sdec(k, senc(k, r, m)) = m.

let SMC_UE = 
    in(c, x);
    let (security_mode_command, amf_dl_seq, xmac) = x in 
    let mac = f(k, security_mode_command, amf_dl_seq) in
    if xmac = mac then (
        let ue_dl_seq = amf_dl_seq in 
		out(c, security_mode_complete))
	else (
		out(c, security_mode_reject)).

let SMC_MME =
    let mac = f(k, security_mode_command, amf_dl_seq) in 
    out(c, (security_mode_command, amf_dl_seq, mac));
    in(c, xres);
    if xres = security_mode_complete then (       
       out(c, registration_accept))
    else (
       out(c, registration_reject)).

let UE =  (SMC_UE).
let MME =  (SMC_MME).

process (!  (new sk1; new imsi1;new amf_dl_seq1;
                (!  (new sk2; new imsi2; new osqn; new amf_dl_seq2;
                        let imsi = choice[imsi1, imsi2] in (
                            let k = choice[sk1, sk2] in (
                                let amf_dl_seq = choice[amf_dl_seq1,amf_dl_seq2] in (
                                    (UE) | (MME)
                                )
                            )
                        )
                    )
                )
            )   
        )


-------------------------------------------------------------------------------------------------------
Neutralizing TMSI Refreshment attack (Section 6.1.4)
---Property: if UE initates service request procedure, the network will eventually perform the configuration 
-- update procedure to update the TMSI when there is no reject or equivalent message sent to the UE. 
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:= TRUE;
-- Attack: attacker drops the configuration update command message sent by the network.
LTLSPEC
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ! ta_changed
	& inj_adv_act_AU != adv_AU_auth_reject
	& inj_adv_act_AU != adv_AU_reg_reject
	& inj_adv_act_AU != adv_AU_nwk_dereg_req
	& inj_adv_act_AU != adv_AU_service_reject
	& inj_adv_act_AU != adv_AU_service_accept
	& inj_adv_act_AU != adv_AU_nwk_dereg_accept
	& inj_adv_act_AU != adv_AU_auth_req
	& inj_adv_act_AU != adv_AU_sm_command
	& inj_adv_act_AU != adv_UA_reg_complete
	& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
	& inj_adv_act_UA != adv_UA_deregreq_switchoff
	& inj_adv_act_UA != adv_UA_service_req
	& inj_adv_act_UA != adv_UA_auth_failure_mac
	& inj_adv_act_UA != adv_UA_auth_failure_seq
	& inj_adv_act_UA != adv_UA_reg_req
	& inj_adv_act_UA != adv_UA_id_res
	& !amfderegrequested 
	& !sec_ctx_update_required
	& !uederegrequested

) ->  
 	G((ue_nas_state=ue_registered & !amf_config_updated & ue_nas_action = service_req)  -> 
	 F (ue_nas_state=ue_registered & amf_config_updated )) ;	

-- Property: If the AMF initiates configuaration update procedure, it will eventually assigns a new TMSI to the 
---- device.
-- The UE responds with security_mode_complete message if the amf sent security_mode_command message.
-- inj_adv_UA_enabled:=	TRUE;
-- inj_adv_AU_enabled:=	FALSE;
-- Attack: Adversary dropped the config_update_complete packet using null_action and caused to fail the config update procedure.
-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& !service_notification
		& config_response_required 
		& inj_adv_act_UA != adv_UA_service_req
		& inj_adv_act_UA != adv_UA_reg_req
		& inj_adv_act_UA != adv_UA_deregreq_switchoff
		& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
		& inj_adv_act_UA != adv_UA_id_res
		& inj_adv_act_UA != adv_UA_sm_complete
		& inj_adv_act_UA != adv_UA_sm_reject
		& inj_adv_act_UA != adv_UA_config_update_complete
		& inj_adv_act_UA != adv_UA_auth_failure_seq
		& inj_adv_act_UA != adv_UA_auth_failure_mac
		& inj_adv_act_UA != adv_UA_auth_response
		& inj_adv_act_UA != adv_UA_reg_complete
		
	)
	->
		G (
			((amf_nas_state = amf_registered) & (amf_nas_action = config_update_cmd)) 
			-> F (chan_UA = chanUA_config_update_complete & amf_config_updated)
		);

-- Property: If the AMF initiates configuaration update procedure, it will eventually assigns a new TMSI to the device.
-- The UE responds with security_mode_complete message if the amf sent security_mode_command message.
-- inj_adv_UA_enabled:=	TRUE;
-- inj_adv_AU_enabled:=	FALSE;
-- Attack: Adversary sent a dereg request and forced the amf to abort the cofiguration update procedure 
-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& !service_notification
		& config_response_required 
		& inj_adv_act_UA != adv_UA_service_req
		& inj_adv_act_UA != adv_UA_reg_req
		& inj_adv_act_UA != adv_UA_null_action
		& inj_adv_act_UA != adv_UA_id_res
		& inj_adv_act_UA != adv_UA_sm_complete
		& inj_adv_act_UA != adv_UA_sm_reject
		& inj_adv_act_UA != adv_UA_config_update_complete
		& inj_adv_act_UA != adv_UA_auth_failure_seq
		& inj_adv_act_UA != adv_UA_auth_failure_mac
		& inj_adv_act_UA != adv_UA_auth_response
		& inj_adv_act_UA != adv_UA_reg_complete
		
	)
	->
		G (
			((amf_nas_state = amf_registered) & (amf_nas_action = config_update_cmd)) 
			-> F (chan_UA = chanUA_config_update_complete & amf_config_updated)
		);

-----------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- Cutting of the Device attack (Section 6.1.5)
-- Property: If the AMF is in registered state for a UE, the amf will be in the registered state until the UE sends another registration request message.
-- inj_adv_UA_enabled:=	TRUE;
-- inj_adv_AU_enabled:=	FALSE;
-- Attack: Adversary sent a registration request messagea and detach the victim UE from the network.
-- 

LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& ! uederegrequested
		& sec_cap_match
		& inj_adv_act_UA != adv_UA_service_req
		& inj_adv_act_UA != adv_UA_deregreq_switchoff
		& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
		& inj_adv_act_UA != adv_UA_id_res
		& inj_adv_act_UA != adv_UA_sm_complete
		& inj_adv_act_UA != adv_UA_sm_reject
		& inj_adv_act_UA != adv_UA_config_update_complete
		& inj_adv_act_UA != adv_UA_null_action
		& inj_adv_act_UA != adv_UA_auth_failure_seq
		& inj_adv_act_UA != adv_UA_auth_failure_mac
		& inj_adv_act_UA != adv_UA_auth_response
		
	)
	->
		G ((amf_nas_state = amf_registered) 
			-> F ((amf_nas_state = amf_registered) U (ue_nas_action = reg_req))) ;



-- Property: If the AMF is in registered state for a UE, the amf will be in the registered state until the UE sends another registration request message.
-- inj_adv_UA_enabled:=	TRUE;
-- inj_adv_AU_enabled:=	FALSE;
-- Attack: Adversary sent a deregistration_request message and detach the victim UE from the network.
-- 
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& ! uederegrequested
		& sec_cap_match
		& inj_adv_act_UA != adv_UA_service_req
		& inj_adv_act_UA != adv_UA_reg_req
		& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
		& inj_adv_act_UA != adv_UA_id_res
		& inj_adv_act_UA != adv_UA_sm_complete
		& inj_adv_act_UA != adv_UA_sm_reject
		& inj_adv_act_UA != adv_UA_config_update_complete
		& inj_adv_act_UA != adv_UA_null_action
		& inj_adv_act_UA != adv_UA_auth_failure_seq
		& inj_adv_act_UA != adv_UA_auth_failure_mac
		& inj_adv_act_UA != adv_UA_auth_response
		
	)
	->
		G ((amf_nas_state = amf_registered) 
			-> F ((amf_nas_state = amf_registered) U (ue_nas_action = reg_req))) ;

-- variant (Section 6.1.5): 
---Property: if UE initates registration request procedure, the network will eventually connect to the network \\
---- if it  has a valid credential
-- Set inj_adv_UA_enabled:=	FALSE; and inj_adv_AU_enabled:=	TRUE;
-- Set the inj_adv_UM_enabled=TRUE, inj_adv_act_MU =FALSE
--- Resultant attacks: (i) The fake base station recurrently sets the victim UE's reg_count=0, does not allow to 
--- downgrade to previous generations. 
--- Resultant attack: id_req auth_req id_req/id_res auth_res id_res => induces to reset the reget counter \\
-- continuous ta_change also causes the ue to reset the reget counter.
--- Impact: denial-of-service attack.


LTLSPEC
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ta_changed
	& !service_notification
	& !amfderegrequested
	& inj_adv_act_AU != adv_AU_auth_reject
	& inj_adv_act_AU != adv_AU_reg_reject
	& inj_adv_act_AU != adv_AU_nwk_dereg_req
	& inj_adv_act_AU != adv_AU_service_reject
	& inj_adv_act_AU != adv_AU_service_accept
	& inj_adv_act_AU != adv_AU_config_update_cmd
	& inj_adv_act_AU != adv_AU_auth_req
	& inj_adv_act_AU != adv_AU_id_req
	& inj_adv_act_AU != adv_AU_nwk_dereg_accept
	& inj_adv_act_AU != adv_AU_reg_accept
	& inj_adv_act_AU != adv_AU_ue_ctx_release

) ->  
 	G(
		 (ue_nas_state=ue_deregistered & enable_N1)  -> 
	 	(F (ue_nas_state=ue_registered)) 
	 );


---- =========================================================================================
-- Denial-of-Service attack
-- Property: if UE FSM is in deregistered state, the UE will eventually move to the register_initiated and UE authenticates MME.
-- Set inj_adv_UA_enabled:=	TRUE; inj_adv_AU_enabled:=	FALSE;
--- Resultant attacks: (i) DoS attacks with reg_reject, service_reject, auth_reject, ue initiated dereg_req
LTLSPEC
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ! ta_changed
	& inj_adv_act_AU != adv_AU_auth_reject
	& inj_adv_act_AU != adv_AU_reg_reject
	& inj_adv_act_AU != adv_AU_nwk_dereg_req
	& inj_adv_act_AU != adv_AU_service_reject
	& inj_adv_act_AU != adv_AU_service_accept
	& inj_adv_act_AU != adv_AU_nwk_dereg_accept
	& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
	& inj_adv_act_UA != adv_UA_deregreq_switchoff
	& inj_adv_act_UA != adv_UA_service_req
	& inj_adv_act_UA != adv_UA_auth_failure_mac
	& inj_adv_act_UA != adv_UA_auth_failure_seq
	& inj_adv_act_UA != adv_UA_reg_req
	& inj_adv_act_UA != adv_UA_null_action
	-- & inj_adv_act_UA != 
	-- & inj_adv_act_UA != 
	& !service_notification
	& !amfderegrequested
) ->  
 	G(ue_nas_state=ue_deregistered  -> (F (ue_nas_state=ue_reg_inited & ue_partial_sec_ctx_exist ))) ;	


-------------------------------------------------------------------------------------------------------
--- Denial-of-service attack in case of configuration update procedure.
---Property: if UE initates service request procedure, the network will eventually perform the configuration 
-- update procedure to update the TMSI.
-- Set inj_adv_UA_enabled:=	TRUE; inj_adv_AU_enabled:=	FALSE;
--- Set the inj_adv_UM_enabled=TRUE, inj_adv_act_MU =FALSE
--- Resultant attacks: (i) DoS attacks with reg_reject, service_reject, auth_reject, ue initiated dereg_req
LTLSPEC
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ! ta_changed
	& inj_adv_act_AU != adv_AU_auth_reject
	& inj_adv_act_AU != adv_AU_reg_reject
	& inj_adv_act_AU != adv_AU_nwk_dereg_req
	& inj_adv_act_AU != adv_AU_service_reject
	& inj_adv_act_AU != adv_AU_service_accept
	& inj_adv_act_AU != adv_AU_nwk_dereg_accept
	& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
	& inj_adv_act_UA != adv_UA_deregreq_switchoff
	& inj_adv_act_UA != adv_UA_service_req
	& inj_adv_act_UA != adv_UA_auth_failure_mac
	& inj_adv_act_UA != adv_UA_auth_failure_seq
	& inj_adv_act_UA != adv_UA_reg_req
	& inj_adv_act_UA != adv_UA_null_action
	-- & inj_adv_act_UA != 
	-- & inj_adv_act_UA != 
	& !paging_requested
	& !amfderegrequested
) ->  
 	G((ue_nas_state=ue_registered & !amf_config_updated & ue_nas_action = service_req)  -> (F (ue_nas_state=ue_registered & amf_config_updated ))) ;	

--------------------------------------------------------------------------------------------------
Traceability attack (similar to prior attack)
-- Property: The UE responds with security_mode_complete message if the amf sent security_mode_command message.
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:=	TRUE;
-- Attack: Adversary sent a replayed auth_request, and received auth_response from the UE (traceability).
-- 

-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:= TRUE;
LTLSPEC
	F (enable_N1 & X G (!enable_N1)) &  
	  (power_on & X (G !power_on)) &
	G( 	!reg_failure
		& !power_off
		& !ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& !uederegrequested
		& sec_cap_match
		& !amfderegrequested
		& inj_adv_act_AU != adv_AU_auth_reject
		& inj_adv_act_AU != adv_AU_reg_reject
		& inj_adv_act_AU != adv_AU_nwk_dereg_req
		& inj_adv_act_AU != adv_AU_service_reject
		& inj_adv_act_AU != adv_AU_service_accept
		& inj_adv_act_AU != adv_AU_config_update_cmd
		& inj_adv_act_AU != adv_AU_sm_command
		& inj_adv_act_AU != adv_AU_id_req
		& inj_adv_act_AU != adv_AU_nwk_dereg_accept
		& inj_adv_act_AU != adv_AU_reg_accept
		& inj_adv_act_AU != adv_AU_ue_ctx_release
		& inj_adv_act_UA != adv_UA_null_action

	)
	->
		G (((ue_nas_state = ue_reg_inited & ue_partial_sec_ctx_exist) & ue_nas_action = auth_response) 
			-> O (chan_AU = chanAU_auth_req & amf_nas_action = auth_req));


-----------------------------------------TODO: need to fix mme_seq ---------------------
Property: If the UE initiates registration procedure, it will eventually establishes the partial security context.
-- inj_adv_UA_enabled:=	TRUE;
-- inj_adv_AU_enabled:=	FALSE;
-- Attack: Authentication Synch Failure Attack.
LTLSPEC
G !(enable_N1 & power_on) &
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ! ta_changed
	& inj_adv_act_AU != adv_AU_auth_reject
	& inj_adv_act_AU != adv_AU_reg_reject
	& inj_adv_act_AU != adv_AU_nwk_dereg_req
	& inj_adv_act_AU != adv_AU_service_reject
	& inj_adv_act_AU != adv_AU_service_accept
	& inj_adv_act_AU != adv_AU_nwk_dereg_accept
	& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
	& inj_adv_act_UA != adv_UA_deregreq_switchoff
	& inj_adv_act_UA != adv_UA_service_req
	& inj_adv_act_UA != adv_UA_auth_failure_mac
	& inj_adv_act_UA != adv_UA_auth_failure_seq
	& inj_adv_act_UA != adv_UA_reg_req
	& inj_adv_act_UA != adv_UA_null_action
	-- & inj_adv_act_UA != 
	-- & inj_adv_act_UA != 
	& !paging_requested
	& !service_notification
	& !amfderegrequested
) ->  
 	G(ue_nas_state=ue_deregistered  -> (F (ue_nas_state=ue_reg_inited & ue_partial_sec_ctx_exist ))) ;

------------------------------------------------------------------------------------------------------------
---Property 11: if UE initates service request procedure, the network will eventually perform the configuration 
-- update procedure to update the TMSI.
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:=	TRUE;
--- Set the inj_adv_UM_enabled=TRUE, inj_adv_act_MU =FALSE
--- Resultant attacks: (i) DoS attacks with reg_reject, service_reject, auth_reject, ue initiated dereg_req
LTLSPEC
F( enable_N1 & X G (!enable_N1)) &  
(power_on & X (G !power_on)) &
G( 
	!reg_failure
	& !power_off
	& !ue_inactivity_detected
	& !smcmd_mac_failure
	& ! ta_changed
	& !paging_requested
	& !amfderegrequested
) ->  
 	G((ue_nas_state=ue_registered & !amf_config_updated & ue_nas_action = service_req)  -> 
	 (F (ue_nas_state=ue_registered & amf_config_updated ))) ;	




---------------------------------------------------------------------------------------------------------------
-- Property: If AMF wants to setup a security context, the UE will eventually set up/update its security context.
-- inj_adv_UA_enabled:=	FALSE;
-- inj_adv_AU_enabled:=	TRUE;
-- counter-example: UE gets registered, but there is not security context established
-- Attack: Adversary can force a device to connect to the fake network while setting up the connection with NEA0 
-----and NIA0 
-- NOTE: This attack will fail if the UE ensures that NEA0 and NIA0 can only be chosen in case of 
--	emergency bearer setup.
LTLSPEC
	G(	!reg_failure
		& !power_off
		& X(!power_on)
		&!ue_inactivity_detected
		& !smcmd_mac_failure
		& ! ta_changed
		& inj_adv_act_AU != adv_AU_auth_reject
		& inj_adv_act_AU != adv_AU_reg_reject
		& inj_adv_act_AU != adv_AU_nwk_dereg_req
		& inj_adv_act_AU != adv_AU_service_reject
		& inj_adv_act_AU != adv_AU_service_accept
		& inj_adv_act_AU != adv_AU_nwk_dereg_accept
		& inj_adv_act_UA != adv_UA_deregreq_notswitchoff
		& inj_adv_act_UA != adv_UA_deregreq_switchoff
		& inj_adv_act_UA != adv_UA_service_req
		& inj_adv_act_UA != adv_UA_auth_failure_mac
		& inj_adv_act_UA != adv_UA_auth_failure_seq
		-- & inj_adv_act_UA != 
		-- & inj_adv_act_UA != 
		& !paging_requested
		& !service_notification
		& !amfderegrequested
	)
	->
		G((amf_nas_action=sm_command)
		-> (F (ue_sec_ctx_updated & ue_complete_sec_ctx_exist))) ;



